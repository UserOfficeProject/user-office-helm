NAME: user-office-app
LAST DEPLOYED: Mon Jul  1 15:07:58 2024
NAMESPACE: default
STATUS: pending-install
REVISION: 1
HOOKS:
---
# Source: user-office-app/charts/duo-backend/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "user-office-app-duo-backend-test-connection"
  labels:
    helm.sh/chart: duo-backend-0.1.0
    app.kubernetes.io/name: duo-backend
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['user-office-app-duo-backend:4000']
  restartPolicy: Never
---
# Source: user-office-app/charts/duo-factory/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "user-office-app-duo-factory-test-connection"
  labels:
    helm.sh/chart: duo-factory-0.1.0
    app.kubernetes.io/name: duo-factory
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['user-office-app-duo-factory:4500']
  restartPolicy: Never
---
# Source: user-office-app/charts/duo-frontend/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "user-office-app-duo-frontend-test-connection"
  labels:
    helm.sh/chart: duo-frontend-0.1.0
    app.kubernetes.io/name: duo-frontend
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['user-office-app-duo-frontend:8080']
  restartPolicy: Never
MANIFEST:
---
# Source: user-office-app/charts/duo-db/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: duo-db
  namespace: "default"
  labels:
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: duo-db
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: duo-db-15.5.11
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: user-office-app
      app.kubernetes.io/name: duo-db
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: user-office-app/charts/duo-db/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: duo-db
  namespace: "default"
  labels:
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: duo-db
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: duo-db-15.5.11
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: user-office-app
      app.kubernetes.io/name: duo-db
      app.kubernetes.io/component: primary
---
# Source: user-office-app/charts/duo-backend/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-office-app-duo-backend
  labels:
    helm.sh/chart: duo-backend-0.1.0
    app.kubernetes.io/name: duo-backend
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: user-office-app/charts/duo-db/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: duo-db
  namespace: "default"
  labels:
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: duo-db
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: duo-db-15.5.11
automountServiceAccountToken: false
---
# Source: user-office-app/charts/duo-factory/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-office-app-duo-factory
  labels:
    helm.sh/chart: duo-factory-0.1.0
    app.kubernetes.io/name: duo-factory
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: user-office-app/charts/duo-frontend/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-office-app-duo-frontend
  labels:
    helm.sh/chart: duo-frontend-0.1.0
    app.kubernetes.io/name: duo-frontend
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: user-office-app/charts/duo-backend/templates/secret.yaml
apiVersion: v1
data:
  secret: ""
kind: Secret
metadata:
  labels:
    app: duo-backend
  name: duo-backend-secret
type: Opaque
---
# Source: user-office-app/charts/duo-db/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: duo-db
  namespace: "default"
  labels:
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: duo-db
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: duo-db-15.5.11
type: Opaque
data:
  postgres-password: "VjMwNkV1RjM3Rw=="
  password: "ZHVvLXBhc3N3b3Jk"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: user-office-app/charts/duo-db/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: duo-db-svcbind-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: duo-db
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: duo-db-15.5.11
type: servicebinding.io/postgresql
data:
  provider: "Yml0bmFtaQ=="
  type: "cG9zdGdyZXNxbA=="
  host: "ZHVvLWRi"
  port: "NTQzMg=="
  username: "cG9zdGdyZXM="
  database: "cG9zdGdyZXM="
  password: "VjMwNkV1RjM3Rw=="
  uri: "cG9zdGdyZXNxbDovL3Bvc3RncmVzOlYzMDZFdUYzN0dAZHVvLWRiOjU0MzIvcG9zdGdyZXM="
---
# Source: user-office-app/charts/duo-db/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: duo-db-svcbind-custom-user
  namespace: "default"
  labels:
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: duo-db
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: duo-db-15.5.11
type: servicebinding.io/postgresql
data:
  provider: "Yml0bmFtaQ=="
  type: "cG9zdGdyZXNxbA=="
  host: "ZHVvLWRi"
  port: "NTQzMg=="
  username: "ZHVvLXVzZXI="
  password: "ZHVvLXBhc3N3b3Jk"
  database: "ZHVv"
  uri: "cG9zdGdyZXNxbDovL2R1by11c2VyOmR1by1wYXNzd29yZEBkdW8tZGI6NTQzMi9kdW8="
---
# Source: user-office-app/charts/duo-backend/templates/configmap.yaml
apiVersion: v1
data:
  AUTH_CLIENT_ID: 28660643602-48hmm4umtc1llikd90iqvm0dvp12vrul.apps.googleusercontent.com
  AUTH_CLIENT_SECRET: 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
  AUTH_DISCOVERY_URL: https://accounts.google.com/.well-known/openid-configuration
  BASE_URL: localhost:4000
  DATE_FORMAT: dd-MM-yyyy
  DATE_TIME_FORMAT: dd-MM-yyyy HH:mm
  JWT_SECRET: secret
  JWT_TOKEN_LIFE: 7d
  NODE_ENV: development
  TZ: Europe/Stockholm
  USER_OFFICE_FACTORY_ENDPOINT: http://user-office-app-duo-factory:4500/generate
kind: ConfigMap
metadata:
  labels:
    app: duo-backend
  name: duo-backend-configmap
---
# Source: user-office-app/charts/duo-factory/templates/configmap.yaml
apiVersion: v1
data:
  null
kind: ConfigMap
metadata:
  labels:
    app: duo-factory
  name: duo-factory-configmap
---
# Source: user-office-app/charts/duo-backend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: user-office-app-duo-backend
  labels:
    helm.sh/chart: duo-backend-0.1.0
    app.kubernetes.io/name: duo-backend
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 4000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: duo-backend
    app.kubernetes.io/instance: user-office-app
---
# Source: user-office-app/charts/duo-db/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: duo-db-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: duo-db
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: duo-db-15.5.11
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/name: duo-db
    app.kubernetes.io/component: primary
---
# Source: user-office-app/charts/duo-db/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: duo-db
  namespace: "default"
  labels:
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: duo-db
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: duo-db-15.5.11
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/name: duo-db
    app.kubernetes.io/component: primary
---
# Source: user-office-app/charts/duo-factory/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: user-office-app-duo-factory
  labels:
    helm.sh/chart: duo-factory-0.1.0
    app.kubernetes.io/name: duo-factory
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 4500
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: duo-factory
    app.kubernetes.io/instance: user-office-app
---
# Source: user-office-app/charts/duo-frontend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: user-office-app-duo-frontend
  labels:
    helm.sh/chart: duo-frontend-0.1.0
    app.kubernetes.io/name: duo-frontend
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: duo-frontend
    app.kubernetes.io/instance: user-office-app
---
# Source: user-office-app/charts/duo-backend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-office-app-duo-backend
  labels:
    helm.sh/chart: duo-backend-0.1.0
    app.kubernetes.io/name: duo-backend
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: duo-backend
      app.kubernetes.io/instance: user-office-app
  template:
    metadata:
      annotations:
        rollme: "VtuH4"
      labels:
        app.kubernetes.io/name: duo-backend
        app.kubernetes.io/instance: user-office-app
    spec:
      serviceAccountName: user-office-app-duo-backend
      securityContext:
        {}
      containers:
        - name: duo-backend
          securityContext:
            {}
          image: "ghcr.io/userofficeproject/user-office-backend:latest"
          imagePullPolicy: Always
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: uri
                  name: duo-db-svcbind-postgres
          envFrom:
            - configMapRef:
                name: duo-backend-configmap
            - secretRef:
                name: duo-backend-secret
          ports:
            - name: http
              containerPort: 4000 
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /readiness
              port: http
          resources:
            {}
---
# Source: user-office-app/charts/duo-factory/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-office-app-duo-factory
  labels:
    helm.sh/chart: duo-factory-0.1.0
    app.kubernetes.io/name: duo-factory
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: duo-factory
      app.kubernetes.io/instance: user-office-app
  template:
    metadata:
      annotations:
        rollme: "elk84"
      labels:
        app.kubernetes.io/name: duo-factory
        app.kubernetes.io/instance: user-office-app
    spec:
      serviceAccountName: user-office-app-duo-factory
      securityContext:
        {}
      containers:
        - name: duo-factory
          securityContext:
            capabilities:
              add:
              - SYS_ADMIN
          image: "ghcr.io/userofficeproject/user-office-factory:develop"
          imagePullPolicy: Always
          env:
            - name: DATABASE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  key: host
                  name: duo-db-svcbind-postgres
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: duo-db-svcbind-postgres
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: duo-db-svcbind-postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: duo-db-svcbind-postgres
            - name: DATABASE_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database
                  name: duo-db-svcbind-postgres
          envFrom:
            - configMapRef:
                name: duo-factory-configmap
          ports:
            - name: http
              containerPort: 4500
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health-check
              port: http
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /health-check
              port: http
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 10
          resources:
            limits:
              ephemeral-storage: 256Mi
            requests:
              ephemeral-storage: 128Mi
---
# Source: user-office-app/charts/duo-frontend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-office-app-duo-frontend
  labels:
    helm.sh/chart: duo-frontend-0.1.0
    app.kubernetes.io/name: duo-frontend
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: duo-frontend
      app.kubernetes.io/instance: user-office-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        rollme: "m2BlA"
      labels:
        app.kubernetes.io/name: duo-frontend
        app.kubernetes.io/instance: user-office-app
    spec:
      serviceAccountName: user-office-app-duo-frontend
      securityContext:
        {}
      containers:
        - name: duo-frontend
          securityContext:
            {}
          image: "ghcr.io/userofficeproject/user-office-frontend:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: user-office-app/charts/duo-db/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: duo-db
  namespace: "default"
  labels:
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: duo-db
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: duo-db-15.5.11
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: duo-db-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: user-office-app
      app.kubernetes.io/name: duo-db
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: duo-db
      labels:
        app.kubernetes.io/instance: user-office-app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: duo-db
        app.kubernetes.io/version: 16.3.0
        helm.sh/chart: duo-db-15.5.11
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: duo-db
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: user-office-app
                    app.kubernetes.io/name: duo-db
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.3.0-debian-12-r16
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "duo-user"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: duo-db
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: duo-db
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "duo"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "duo-user" -d "dbname=duo" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "duo-user" -d "dbname=duo" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: user-office-app/charts/duo-backend/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: user-office-app-duo-backend
  labels:
    helm.sh/chart: duo-backend-0.1.0
    app.kubernetes.io/name: duo-backend
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 16m
    nginx.org/client-max-body-size: 16m
spec:
  rules:
    - host: "localhost"
      http:
        paths:
          - path: /download
            pathType: ImplementationSpecific
            backend:
              service:
                name: user-office-app-duo-backend
                port:
                  number: 4000
          - path: /preview
            pathType: ImplementationSpecific
            backend:
              service:
                name: user-office-app-duo-backend
                port:
                  number: 4000
          - path: /downloads
            pathType: ImplementationSpecific
            backend:
              service:
                name: user-office-app-duo-backend
                port:
                  number: 4000
          - path: /uploads
            pathType: ImplementationSpecific
            backend:
              service:
                name: user-office-app-duo-backend
                port:
                  number: 4000
          - path: /files
            pathType: ImplementationSpecific
            backend:
              service:
                name: user-office-app-duo-backend
                port:
                  number: 4000
          - path: /graphql
            pathType: ImplementationSpecific
            backend:
              service:
                name: user-office-app-duo-backend
                port:
                  number: 4000
---
# Source: user-office-app/charts/duo-frontend/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: user-office-app-duo-frontend
  labels:
    helm.sh/chart: duo-frontend-0.1.0
    app.kubernetes.io/name: duo-frontend
    app.kubernetes.io/instance: user-office-app
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 16m
    nginx.org/client-max-body-size: 16m
spec:
  rules:
    - host: "localhost"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: user-office-app-duo-frontend
                port:
                  number: 8080

